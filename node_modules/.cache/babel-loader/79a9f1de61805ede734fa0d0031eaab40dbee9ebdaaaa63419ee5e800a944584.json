{"ast":null,"code":"var _jsxFileName = \"C:\\\\Universidad\\\\2024-2\\\\GPTI\\\\REPO DEPLOY FRONT\\\\REPOOO\\\\GPTI\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AdBanner from './AdBanner';\nimport JobDetails from './components/JobDetails';\nimport adsData from './adsData';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _pagination$selectedC4, _pagination$selectedC5, _pagination$selectedC6, _pagination$selectedC7, _pagination$selectedC8;\n  const [selectedAds, setSelectedAds] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [filteredJobs, setFilteredJobs] = useState([]);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [coverLetter, setCoverLetter] = useState('');\n  const [jobInfo, setJobInfo] = useState({\n    nombre: '',\n    telefono: '',\n    correo: '',\n    habilidades: ['', '', '', '', ''],\n    experiencia: '',\n    intereses: '',\n    porque: '',\n    oferta: ''\n  });\n  const formatCategoryName = category => {\n    // Manejar casos específicos\n    const specialCases = {\n      asistenteadministrativo: \"ASISTENTE ADMINISTRATIVO\",\n      serviciosdomesticos: \"SERVICIOS DOMÉSTICOS\",\n      esteticacuidadopersonal: \"ESTÉTICA CUIDADO PERSONAL\",\n      secretariasrecepcionistas: \"SECRETARIAS RECEPCIONISTAS\"\n    };\n\n    // Si la categoría coincide con un caso especial, devuelve el formato adecuado\n    if (specialCases[category.toLowerCase()]) {\n      return specialCases[category.toLowerCase()];\n    }\n\n    // Formatear otras categorías (por defecto)\n    return category.replace(/([a-z])([A-Z])/g, \"$1 $2\") // Separar camelCase\n    .replace(/([A-Z]+)([A-Z][a-z])/g, \"$1 $2\") // Manejar todas mayúsculas\n    .replace(/([A-Za-z])([0-9])/g, \"$1 $2\") // Separar texto de números (opcional)\n    .toUpperCase(); // Convertir todo a mayúsculas\n  };\n  const [pagination, setPagination] = useState({}); // Paginación por categoría\n\n  const opcionesExperiencia = [{\n    value: '0',\n    label: 'Sin experiencia'\n  }, {\n    value: '1',\n    label: '1 año'\n  }, {\n    value: '2',\n    label: '2 años'\n  }, {\n    value: '3',\n    label: '3 años'\n  }, {\n    value: '4',\n    label: 'Más de 3 años'\n  }];\n\n  // Función para seleccionar anuncios únicos\n  const selectUniqueAds = count => {\n    const shuffledAds = [...adsData].sort(() => Math.random() - 0.5); // Mezcla los anuncios\n    return shuffledAds.slice(0, count); // Selecciona `count` anuncios únicos\n  };\n  useEffect(() => {\n    setSelectedAds(selectUniqueAds(2)); // Seleccionar 2 anuncios únicos\n  }, []);\n\n  // Fetch de categorías\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await fetch('https://gptjob-r4ne.onrender.com/categories');\n        if (!response.ok) throw new Error('Error al obtener categorías desde el servidor');\n        const categoriesData = await response.json();\n        setCategories(categoriesData.map(category => ({\n          original: category,\n          // Guarda el nombre original por si lo necesitas\n          formatted: formatCategoryName(category),\n          // Guarda el nombre formateado\n          jobs: []\n        })));\n      } catch (error) {\n        console.error('Error al obtener categorías:', error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Fetch de trabajos según categoría y página\n  const fetchJobs = async (category, page = 1) => {\n    try {\n      //const response = await fetch(`http://localhost:3000/jobs?category=${category}&page=${page}`);\n      const response = await fetch(`https://gptjob-r4ne.onrender.com/jobs?category=${category}&page=${page}`);\n      console.log('response Fetch de trabajos según categoría y página: ', response);\n      if (!response.ok) throw new Error('Error al obtener trabajos desde el servidor');\n      const data = await response.json();\n      console.log('Body de la respuesta:', data);\n      setFilteredJobs(data.jobs);\n      setPagination(prev => ({\n        ...prev,\n        [category]: {\n          currentPage: page,\n          totalPages: data.pagination.totalPages,\n          totalJobs: data.pagination.totalJobs,\n          pageSize: data.pagination.pageSize\n        }\n      }));\n    } catch (error) {\n      console.error(\"Error al obtener trabajos:\", error);\n    }\n  };\n  const handleCategoryClick = category => {\n    setSelectedCategory(category);\n    setFilteredJobs([]);\n    fetchJobs(category, 1); // Reinicia la página a 1 para la nueva categoría\n  };\n  const handleViewDetails = job => {\n    setSelectedJob(job);\n    setCoverLetter('');\n    setJobInfo({\n      nombre: '',\n      telefono: '',\n      correo: '',\n      habilidades: ['', '', '', '', ''],\n      experiencia: '',\n      intereses: '',\n      porque: '',\n      oferta: ''\n    });\n  };\n  const handleInputChange = (index, value) => {\n    const updatedSkills = [...jobInfo.habilidades];\n    updatedSkills[index] = value;\n    setJobInfo({\n      ...jobInfo,\n      habilidades: updatedSkills\n    });\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setJobInfo({\n      ...jobInfo,\n      [name]: value\n    });\n  };\n  const handleSubmit = async () => {\n    const userData = {\n      ...jobInfo,\n      oferta: selectedJob.description // Información del trabajo seleccionado\n    };\n    try {\n      //const response = await fetch('http://localhost:3001/recomendaciones', {\n      const response = await fetch('https://gptjob-r4ne.onrender.com/recomendaciones', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) throw new Error('Error en la respuesta del servidor');\n      const data = await response.json();\n      setCoverLetter(data.carta || 'No se generó una carta de presentación');\n    } catch (error) {\n      console.error(\"Error al enviar datos al backend:\", error);\n    }\n  };\n  const handleNextPage = () => {\n    var _pagination$selectedC, _pagination$selectedC2;\n    if (selectedCategory && ((_pagination$selectedC = pagination[selectedCategory]) === null || _pagination$selectedC === void 0 ? void 0 : _pagination$selectedC.currentPage) < ((_pagination$selectedC2 = pagination[selectedCategory]) === null || _pagination$selectedC2 === void 0 ? void 0 : _pagination$selectedC2.totalPages)) {\n      fetchJobs(selectedCategory, pagination[selectedCategory].currentPage + 1);\n    }\n  };\n  const handlePrevPage = () => {\n    var _pagination$selectedC3;\n    if (selectedCategory && ((_pagination$selectedC3 = pagination[selectedCategory]) === null || _pagination$selectedC3 === void 0 ? void 0 : _pagination$selectedC3.currentPage) > 1) {\n      fetchJobs(selectedCategory, pagination[selectedCategory].currentPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), selectedJob ? /*#__PURE__*/_jsxDEV(JobDetails, {\n      job: selectedJob,\n      onBack: () => setSelectedJob(null),\n      jobInfo: jobInfo,\n      onInputChange: handleInputChange,\n      onChange: handleChange,\n      onSubmit: handleSubmit,\n      opcionesExperiencia: opcionesExperiencia,\n      coverLetter: coverLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Encuentra tu trabajo ideal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"category-list\",\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleCategoryClick(category.original) // Usa el original para las consultas\n          ,\n          className: \"category-button\",\n          children: [category.formatted, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), filteredJobs.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"job-list\",\n        children: filteredJobs.map(job => /*#__PURE__*/_jsxDEV(JobItem, {\n          job: job,\n          onViewDetails: () => handleViewDetails(job)\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-controls\",\n        children: selectedCategory && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePrevPage,\n            disabled: ((_pagination$selectedC4 = pagination[selectedCategory]) === null || _pagination$selectedC4 === void 0 ? void 0 : _pagination$selectedC4.currentPage) === 1,\n            children: \"Anterior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"P\\xE1gina \", ((_pagination$selectedC5 = pagination[selectedCategory]) === null || _pagination$selectedC5 === void 0 ? void 0 : _pagination$selectedC5.currentPage) || 1, \" de\", ' ', ((_pagination$selectedC6 = pagination[selectedCategory]) === null || _pagination$selectedC6 === void 0 ? void 0 : _pagination$selectedC6.totalPages) || 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextPage,\n            disabled: ((_pagination$selectedC7 = pagination[selectedCategory]) === null || _pagination$selectedC7 === void 0 ? void 0 : _pagination$selectedC7.currentPage) === ((_pagination$selectedC8 = pagination[selectedCategory]) === null || _pagination$selectedC8 === void 0 ? void 0 : _pagination$selectedC8.totalPages),\n            children: \"Siguiente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Q1wvy3ZFekFezZ7G/UZCQyXg5HA=\");\n_c = App;\nconst Navbar = () => /*#__PURE__*/_jsxDEV(\"nav\", {\n  className: \"navbar\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar-brand\",\n    children: \"GPTJOB\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 265,\n  columnNumber: 3\n}, this);\n_c2 = Navbar;\nconst Footer = () => /*#__PURE__*/_jsxDEV(\"footer\", {\n  className: \"footer\",\n  children: /*#__PURE__*/_jsxDEV(AdBanner, {\n    position: \"bottom\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 271,\n  columnNumber: 3\n}, this);\n_c3 = Footer;\nconst JobItem = ({\n  job,\n  onViewDetails\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"job-item\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: job.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Ubicaci\\xF3n: \", job.city]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onViewDetails,\n    children: \"Abrir Detalles\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 277,\n  columnNumber: 3\n}, this);\n_c4 = JobItem;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Navbar\");\n$RefreshReg$(_c3, \"Footer\");\n$RefreshReg$(_c4, \"JobItem\");","map":{"version":3,"names":["React","useState","useEffect","AdBanner","JobDetails","adsData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_pagination$selectedC4","_pagination$selectedC5","_pagination$selectedC6","_pagination$selectedC7","_pagination$selectedC8","selectedAds","setSelectedAds","categories","setCategories","selectedCategory","setSelectedCategory","filteredJobs","setFilteredJobs","selectedJob","setSelectedJob","coverLetter","setCoverLetter","jobInfo","setJobInfo","nombre","telefono","correo","habilidades","experiencia","intereses","porque","oferta","formatCategoryName","category","specialCases","asistenteadministrativo","serviciosdomesticos","esteticacuidadopersonal","secretariasrecepcionistas","toLowerCase","replace","toUpperCase","pagination","setPagination","opcionesExperiencia","value","label","selectUniqueAds","count","shuffledAds","sort","Math","random","slice","fetchCategories","response","fetch","ok","Error","categoriesData","json","map","original","formatted","jobs","error","console","fetchJobs","page","log","data","prev","currentPage","totalPages","totalJobs","pageSize","handleCategoryClick","handleViewDetails","job","handleInputChange","index","updatedSkills","handleChange","e","name","target","handleSubmit","userData","description","method","headers","body","JSON","stringify","carta","handleNextPage","_pagination$selectedC","_pagination$selectedC2","handlePrevPage","_pagination$selectedC3","className","children","Navbar","fileName","_jsxFileName","lineNumber","columnNumber","onBack","onInputChange","onChange","onSubmit","onClick","length","JobItem","onViewDetails","id","disabled","Footer","_c","_c2","position","_c3","title","city","_c4","$RefreshReg$"],"sources":["C:/Universidad/2024-2/GPTI/REPO DEPLOY FRONT/REPOOO/GPTI/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport AdBanner from './AdBanner';\r\nimport JobDetails from './components/JobDetails';\r\nimport adsData from './adsData';\r\n\r\nfunction App() {\r\n  const [selectedAds, setSelectedAds] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n  const [coverLetter, setCoverLetter] = useState('');\r\n  const [jobInfo, setJobInfo] = useState({\r\n    nombre: '',\r\n    telefono: '',\r\n    correo: '',\r\n    habilidades: ['', '', '', '', ''],\r\n    experiencia: '',\r\n    intereses: '',\r\n    porque: '',\r\n    oferta: '',\r\n  });\r\n\r\n  const formatCategoryName = (category) => {\r\n    // Manejar casos específicos\r\n    const specialCases = {\r\n      asistenteadministrativo: \"ASISTENTE ADMINISTRATIVO\",\r\n      serviciosdomesticos: \"SERVICIOS DOMÉSTICOS\",\r\n      esteticacuidadopersonal: \"ESTÉTICA CUIDADO PERSONAL\",\r\n      secretariasrecepcionistas: \"SECRETARIAS RECEPCIONISTAS\",\r\n    };\r\n  \r\n    // Si la categoría coincide con un caso especial, devuelve el formato adecuado\r\n    if (specialCases[category.toLowerCase()]) {\r\n      return specialCases[category.toLowerCase()];\r\n    }\r\n  \r\n    // Formatear otras categorías (por defecto)\r\n    return category\r\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Separar camelCase\r\n      .replace(/([A-Z]+)([A-Z][a-z])/g, \"$1 $2\") // Manejar todas mayúsculas\r\n      .replace(/([A-Za-z])([0-9])/g, \"$1 $2\") // Separar texto de números (opcional)\r\n      .toUpperCase(); // Convertir todo a mayúsculas\r\n  };\r\n  \r\n  \r\n  const [pagination, setPagination] = useState({}); // Paginación por categoría\r\n\r\n  const opcionesExperiencia = [\r\n    { value: '0', label: 'Sin experiencia' },\r\n    { value: '1', label: '1 año' },\r\n    { value: '2', label: '2 años' },\r\n    { value: '3', label: '3 años' },\r\n    { value: '4', label: 'Más de 3 años' }\r\n  ];\r\n\r\n  // Función para seleccionar anuncios únicos\r\n  const selectUniqueAds = (count) => {\r\n    const shuffledAds = [...adsData].sort(() => Math.random() - 0.5); // Mezcla los anuncios\r\n    return shuffledAds.slice(0, count); // Selecciona `count` anuncios únicos\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedAds(selectUniqueAds(2)); // Seleccionar 2 anuncios únicos\r\n  }, []);\r\n\r\n  // Fetch de categorías\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const response = await fetch('https://gptjob-r4ne.onrender.com/categories');\r\n        if (!response.ok) throw new Error('Error al obtener categorías desde el servidor');\r\n\r\n        const categoriesData = await response.json();\r\n        setCategories(\r\n          categoriesData.map((category) => ({\r\n            original: category, // Guarda el nombre original por si lo necesitas\r\n            formatted: formatCategoryName(category), // Guarda el nombre formateado\r\n            jobs: [],\r\n          }))\r\n        );\r\n      } catch (error) {\r\n        console.error('Error al obtener categorías:', error);\r\n      }\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []);\r\n\r\n\r\n  // Fetch de trabajos según categoría y página\r\n  const fetchJobs = async (category, page = 1) => {\r\n    try {\r\n      //const response = await fetch(`http://localhost:3000/jobs?category=${category}&page=${page}`);\r\n      const response = await fetch(`https://gptjob-r4ne.onrender.com/jobs?category=${category}&page=${page}`);\r\n\r\n      console.log('response Fetch de trabajos según categoría y página: ', response)\r\n\r\n      if (!response.ok) throw new Error('Error al obtener trabajos desde el servidor');\r\n      \r\n  \r\n      const data = await response.json();\r\n\r\n      console.log('Body de la respuesta:', data);\r\n      setFilteredJobs(data.jobs);\r\n\r\n      setPagination((prev) => ({\r\n        ...prev,\r\n        [category]: {\r\n          currentPage: page,\r\n          totalPages: data.pagination.totalPages,\r\n          totalJobs: data.pagination.totalJobs,\r\n          pageSize: data.pagination.pageSize,\r\n        },\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error al obtener trabajos:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCategoryClick = (category) => {\r\n    setSelectedCategory(category);\r\n    setFilteredJobs([]);\r\n    fetchJobs(category, 1); // Reinicia la página a 1 para la nueva categoría\r\n  };\r\n\r\n  const handleViewDetails = (job) => {\r\n    setSelectedJob(job);\r\n    setCoverLetter('');\r\n    setJobInfo({\r\n      nombre: '',\r\n      telefono: '',\r\n      correo: '',\r\n      habilidades: ['', '', '', '', ''],\r\n      experiencia: '',\r\n      intereses: '',\r\n      porque: '',\r\n      oferta: '',\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (index, value) => {\r\n    const updatedSkills = [...jobInfo.habilidades];\r\n    updatedSkills[index] = value;\r\n    setJobInfo({ ...jobInfo, habilidades: updatedSkills });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setJobInfo({ ...jobInfo, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const userData = {\r\n      ...jobInfo,\r\n      oferta: selectedJob.description, // Información del trabajo seleccionado\r\n    };\r\n\r\n    try {\r\n      \r\n      //const response = await fetch('http://localhost:3001/recomendaciones', {\r\n        const response = await fetch('https://gptjob-r4ne.onrender.com/recomendaciones', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Error en la respuesta del servidor');\r\n\r\n      const data = await response.json();\r\n      setCoverLetter(data.carta || 'No se generó una carta de presentación');\r\n    } catch (error) {\r\n      console.error(\"Error al enviar datos al backend:\", error);\r\n    }\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    if (selectedCategory && pagination[selectedCategory]?.currentPage < pagination[selectedCategory]?.totalPages) {\r\n      fetchJobs(selectedCategory, pagination[selectedCategory].currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    if (selectedCategory && pagination[selectedCategory]?.currentPage > 1) {\r\n      fetchJobs(selectedCategory, pagination[selectedCategory].currentPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Navbar />\r\n\r\n      {selectedJob ? (\r\n        <JobDetails\r\n          job={selectedJob}\r\n          onBack={() => setSelectedJob(null)}\r\n          jobInfo={jobInfo}\r\n          onInputChange={handleInputChange}\r\n          onChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n          opcionesExperiencia={opcionesExperiencia}\r\n          coverLetter={coverLetter}\r\n        />\r\n      ) : (\r\n        <>\r\n          <header className=\"app-header\">\r\n            <h1>Encuentra tu trabajo ideal</h1>\r\n          </header>\r\n\r\n          <section className=\"category-list\">\r\n            {categories.map((category, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleCategoryClick(category.original)} // Usa el original para las consultas\r\n                className=\"category-button\"\r\n              >\r\n                {category.formatted} {/* Usa el formateado para mostrar */}\r\n              </button>\r\n            ))}\r\n          </section>\r\n\r\n          {filteredJobs.length > 0 && (\r\n            <section className=\"job-list\">\r\n              {filteredJobs.map((job) => (\r\n                <JobItem key={job.id} job={job} onViewDetails={() => handleViewDetails(job)} />\r\n              ))}\r\n            </section>\r\n          )}\r\n          <div className=\"pagination-controls\">\r\n            {selectedCategory && (\r\n              <>\r\n                <button\r\n                  onClick={handlePrevPage}\r\n                  disabled={pagination[selectedCategory]?.currentPage === 1}\r\n                >\r\n                  Anterior\r\n                </button>\r\n                <span>\r\n                  Página {pagination[selectedCategory]?.currentPage || 1} de{' '}\r\n                  {pagination[selectedCategory]?.totalPages || 1}\r\n                </span>\r\n                <button\r\n                  onClick={handleNextPage}\r\n                  disabled={\r\n                    pagination[selectedCategory]?.currentPage === pagination[selectedCategory]?.totalPages\r\n                  }\r\n                >\r\n                  Siguiente\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Navbar = () => (\r\n  <nav className=\"navbar\">\r\n    <div className=\"navbar-brand\">GPTJOB</div>\r\n  </nav>\r\n);\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <AdBanner position=\"bottom\" />\r\n  </footer>\r\n);\r\n\r\nconst JobItem = ({ job, onViewDetails }) => (\r\n  <div className=\"job-item\">\r\n    <h2>{job.title}</h2>\r\n    <p>Ubicación: {job.city}</p>\r\n    <button onClick={onViewDetails}>Abrir Detalles</button>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}